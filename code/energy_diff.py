import numpy as np
import sys, os
import pandas as pd
import pybel
from pybel import ob
import openbabel


# Force Field --- MMFF94 
ff = pybel._forcefields['mmff94']

# function to compute energy
def energy():
    return ff.Energy(False)

# function to get energy difference between conformers generated by BO/uniform and lowest energy conformation found by Confab
def energy_analysis(file_in, seed):
    energy_uniform = []
    energy_EI = []
    energy_LCB = []
    energy_confab = []
    energy_200_uniform = []
    energy_200_EI = []
    energy_200_LCB = []
    path_record = []
    
    for paths, dirs, files in os.walk(file_in):
        if paths == file_in:
            continue
       
	path_record.append(os.path.basename(paths))
        for x in files:

            ##  read molecules (uniform search, BO with EI, BO with LCB)
            if x.endswith('uniform_{}.sdf'.format(seed)):
                uniform_ob = pybel.readfile('sdf', os.path.join(paths, x)).next()
                ff.Setup(uniform_ob.OBMol)
                energy_uniform.append(energy())
            
            if x.endswith('EI_bayes_{}.sdf'.format(seed)):
                EI_ob = pybel.readfile('sdf', os.path.join(paths, x)).next()
                ff.Setup(EI_ob.OBMol)
                energy_EI.append(energy())

            if x.endswith('LCB_bayes_{}.sdf'.format(seed)):
                LCB_ob = pybel.readfile('sdf', os.path.join(paths, x)).next()
                ff.Setup(LCB_ob.OBMol)
                energy_LCB.append(energy())
            
            ##   read lowest energy conformation from Confab
            if x.endswith('confab.sdf'):
                confabs_ob = pybel.readfile('sdf', os.path.join(paths, x)).next()
                ff.Setup(confabs_ob.OBMol)
                energy_confab.append(energy())
            
            ##  read molecules (200 iterations)
            if x.endswith('uniform_200_{}.sdf'.format(seed)):
                uniform_ob = pybel.readfile('sdf', os.path.join(paths, x)).next()
                ff.Setup(uniform_ob.OBMol)
                energy_200_uniform.append(energy())

            if x.endswith('EI_bayes_200_{}.sdf'.format(seed)):
                EI_ob = pybel.readfile('sdf', os.path.join(paths, x)).next()
                ff.Setup(EI_ob.OBMol)
                energy_200_EI.append(energy())

            if x.endswith('LCB_bayes_200_{}.sdf'.format(seed)):
                LCB_ob = pybel.readfile('sdf', os.path.join(paths, x)).next()
                ff.Setup(LCB_ob.OBMol)
                energy_200_LCB.append(energy())


        if any(energy_200_EI) == True:

            EI_difference = np.array(energy_200_EI) - np.array(energy_confab)
            LCB_difference = np.array(energy_200_LCB) - np.array(energy_confab)
            uniform_difference = np.array(energy_200_uniform) - np.array(energy_confab)

        else:

            EI_difference = np.array(energy_EI) - np.array(energy_confab)
            LCB_difference = np.array(energy_LCB) - np.array(energy_confab)
            uniform_difference = np.array(energy_uniform) - np.array(energy_confab)

    data = pd.DataFrame({"Target": path_record, "Uniform": uniform_difference, "EI": EI_difference,"LCB": LCB_difference, "N_rot": 4}, columns = ["Target","Uniform", "EI", "LCB", "N_rot"])

    return data



# Example: get the energy difference for molecules with one rotatable bond
# Change "file_input" and "file_name" to get energy difference for other molecules
# lowest energy conformation found by Confab is used as reference 
# Negative energy difference indicate better energy 
# 
# seeds for molecules with one to six rotatable bonds except four rotatable bonds (100 iterations): 123, 234, 345, 456, 321
# seeds for molecules with four rotatable bonds (100 iterations) : 1234, 2345, 3456, 4567, 321
# seeds for molecules with five rotatable bonds (200 iterations) : 123, 234, 345, 456

file_input = '/path/to/data/'
seeds = [1234, 2345, 3456, 4567, 321]
for seed in seeds: 
    result = energy_analysis(file_input, seed)
    file_name = "four_{}.txt".format(seed)
    result.to_csv(os.path.join(os.path.dir(os.getcwd()) + '/result/energy', file_name), sep=',', index=None)
    del result


